1.声明一个块级作用域 let block = 'only'  在同一个作用域中，不能对同一个变量名进行第二次声明，不管第一次是不是用let声明的
2.声明一个常量 const only = onchange  值不能修改，在同一个作用域中，不能对同一个变量名声明两次
var name = 'kunood'  console.log(window.name == name) //true
let name = 'kunood'  console.log(window.name == name) //false
const name = 'kunood'  console.log(window.name == name) //false
  后面两种都是块级作用域声明方式
  for(var i = 0; i < 10; i++){setTimeout(function(){console.log(i)},1000)}//10个10
  for(let i = 0; i < 10; i++){setTimeout(function(){console.log(i)},1000)}//0-9
  let声明一个块级作用域的 i 第二次执行循环的i 跟第一个i是不同的内存地址

解构：let [first,second..] =arr  如果数组项不足 对应的变量就是undefined
     let [fist,,three,...others] =arr 如果不想取某个值，逗号空出来，...others会接收剩余的项组成一个数组
     let {name,age} = {name:'kunood',age:18}
     let {name:info,age:number} = {name:'kunood',age:18}; 重命名变量，不用加引号，防止某个变量已经声明过，导致报错
     let {name,aga,rank=1080} = {name:'kunood',age:18}  当分配不足时，使用默认值
     
@模板字符串拼接变量 ： `字符串${name}`  反引号包裹全部，${} 解析变量  反引号之间是可以嵌套的
  1.多行字符串，如果使用模板字符串，任何被包裹在两个反引号之间的字符都会被认为是有效的字符串内容，包括换行字符。所以。
    `line1
    line2`//等价于'line1\n' + 'line2'  `line1\nline2`
  2.带标签的模板字符串
    标签使您可以用函数解析模板字符串。标签函数的第一个参数包含一个字符串值的数组。其余的参数与表达式相关
    const = fnName`xxxx`; fnName---function name(stringArr,...values)  ...values ==模板字符串中所有的${} 它是一个数组
    stringArr是一个数组，它包含了模板字符串的普通文本，每一项就是${}隔开的字符串，如果模板字符串的开头或结尾是${},那么它在数组中项的值就是undefined
  3.原始字符串在标签函数的第一个参数中，存在一个特殊的属性raw ，我们可以通过它来访问模板字符串的原始字符串
    

一、变量提升(hoisting)
  js会将当前作用域的所有变量的声明提升到程序的顶部，执行代码js经历编译和执行阶段，而js在编译阶段的时候，会搜集所有的变量声明并且提前声明变量
  即  console.log(name)             编译： var name;
      var name = 'kunood',          执行： console.log(name); name = 'kunood'
  函数声明高于一切，毕竟函数是js的第一公民
        foo(); //编译 var foo; var foo=fn 执行：执行foo()  foo=2
        function foo() {
            console.log('foo'); // foo
        }
        var foo = 2;
       console.log(typeof foo);//number
  Temporal dead zone 暂时性死区  TDZ禁止在未声明之前访问变量
  TDZ影响到的语句  cosnt  let  class语句
  
二、箭头函数
  1.匿名函数 变成箭头函数  去掉function关键字，没有参数空括号+箭头 （)=>{return false}
    一个参数省略括号+箭头  arg=>{return false}
    多个参数逗号隔开+箭头  (arg1,arg2,arg3..)=>{return false}
    如果想将具名函数变成箭头函数 可以使用函数表达式
  2.隐性返回：如果一个函数只想单纯的返回一些数据 可以省略大括号和 return  只留下表达式或值 ()=> n+m
  3.箭头函数的 this 指向 ：箭头函数的this是在定义函数时绑定的，不是在执行过程中绑定的。简单的说，函数在定义时，this就继承了定义函数的对象。
  4.箭头函数不使用场景：当需要重新绑定this值时，不能使用箭头函数
    一个构造函数：实例化一个对象的时候需要将this绑定到当前对象，而箭头函数this不能重新绑定
    当你需要arguments对象时，不能用箭头函数，因为他没有

三、参数默认值
    function sum(a=3,b=4)
   
四、新增的函数 和方法
  str.startsWith(search[,positionIndex]) 
  str.endsWith(search)
  str.includes(serach)
  str.repeat(n)
  
  2.数组方法
  Array.from() 返回一 数组 将类数组对象转换成数组对象，比如arguments Nodelist  Array.from(arguments)  
  const  str = 'hello world'  Array.from(str) //['h','l',...]
  Array.of()返回一个数组，所传的参数，就是数组的项
  
  arr.find(fn) fn的参数 value：数组的项  对数组的每一项调用函数，当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，
  之后的值不会再调用执行函数--在一个数组中寻找复合条件的项
  arr.findIndex() 在一个数组中寻找复合条件的项的索引
  
新的遍历 for(let value of  arr)
  1.直接遍历数组项的值，但是只是遍历数字索引的项
  2.相对于foreach的不能跳过和终止， for of  可以的
  3.不能遍历对象
  
可扩展运算符
  扩展运算符是三个点（...）。用于取出参数对象的所有可遍历属性，然后拷贝到当前对象之中
  如果你执行 const arr2 = arr1 你修改arr2，arr1也会变，你可以这样 const arr2 = [...arr1]
  在参数中使用，function(...arg) 将一个对象的可遍历属性遍历传参
  
对象字面量的新特性
  1.属性简写：  当你的对象的 keyName == valueName  比如 {name:name} 简写 {name}
  2.方法简写：send:function(){}  ==> send(){}
  3.对象的计算属性  {[]:xx}  [] 就相当于模板字符串的${} 里面可使用变量、表达式
  
Promise：
  1.promise 解决了异步请求的回调地狱
  2.let ajaxs = new Promise((resolve,reject)=>{
              //请求...
              if(respon){ 
                resolve(data) //请求成功 调用内置的reslove()函数
               }else{
                 reject(msgerr)//请求失败，调用reject()函数
  })
  
 3.对请求的最终结果进行监听
   ajaxs.then(data=>{xx}).catch(err=>{xxx})
 Promise.all方法用来包装许多个Promise实例，然后组成了一个新的Promise对象，新的Promise对象的状态由前面几个被包裹的Promise对象的状态决定，
 如果前面的Promise都被resolve了，那么新的Promise的状态也是resolve的；只要有一个Promise被reject了，那么组成的新的Promise的状态也是reject的。
 
 Promise.race方法和上面的Promise.all有点类似，都是包装许多的Promise对象，然后组成了一个新的Promise对象，但是使用Promise.race的含义是：
 只要包裹的的Promise对象中有一个的状态发生了改变那么组成的这个新的Promise对象的状态就是上面那个率先改变的Promise实例的状态。

新变量：symbol 生成一个唯一的标志符， 为了解决对象属性名的冲突
  1. let lisi = Symbol('lisi');
  2. 如果对象有个Symbol类型的属性，那这个属性不是可枚举属性，不能像平常属性一样访问 synobj[Object.getOwnPropertySymbols(synobj)[0]]
  
ES6 模块
  有些浏览器目前还没支持Es6 模块，可以通过 npm install webpack --save-dev  封装使用
  babel:将Es6的语法变成Es5的语法，兼容浏览器 npm install babel-loader babel-core babel-preset-es2015 --save-dev
  在node_modules文件夹下，创建一个webpack.config.js 进行配置
  模块的导入 -导出  ES6 模块不是对象，而是通过`export`命令显式指定输出的代码，再通过`import`命令输入
  import { stat, exists, readFile } from 'fs';
  上面代码的实质是从`fs`模块加载 3 个方法，其他方法不加载。这种加载称为“编译时加载”或者静态加载
  模块之中，顶层的`this`关键字返回`undefined`，而不是指向`window`。也就是说，在模块顶层使用`this`关键字，是无意义的。
  1  export let counter = 3;
     export function incCounter() {
      counter++;
  }
  2.第二种方式  export default Breadcrumbs;
  如果模块只有一个输出值，就使用`export default`，如果模块有多个输出值，就不使用`export default`，`export default`与普通的`export`不要同时使用。
  
Babel: [Babel](https://babeljs.io/) 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码
下面的命令在项目目录中，安装 Babel。
$ npm install --save-dev @babel/core
Babel 的配置文件是.babelrc，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。

该文件用来设置转码规则和插件，基本格式如下。

{
  "presets": [],
  "plugins": []
}
presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。

# 最新转码规则
$ npm install --save-dev @babel/preset-env

# react 转码规则
$ npm install --save-dev @babel/preset-react
然后，将这些规则加入.babelrc。

  {
    "presets": [
      "@babel/env",
      "@babel/preset-react"
    ],
    "plugins": []
  }
注意，以下所有 Babel 工具和模块的使用，都必须先写好.babelrc。
Babel 提供命令行工具@babel/cli，用于命令行转码。

它的安装命令如下。

$ npm install --save-dev @babel/cli
基本用法如下。

# 转码结果输出到标准输出
$ npx babel example.js

# 转码结果写入一个文件
# --out-file 或 -o 参数指定输出文件
$ npx babel example.js --out-file compiled.js
# 或者
$ npx babel example.js -o compiled.js

# 整个目录转码
# --out-dir 或 -d 参数指定输出目录
$ npx babel src --out-dir lib
# 或者
$ npx babel src -d lib

# -s 参数生成source map文件
$ npx babel src -d lib -s
babel-node
@babel/node模块的babel-node命令，提供一个支持 ES6 的 REPL 环境。它支持 Node 的 REPL 环境的所有功能，而且可以直接运行 ES6 代码。

首先，安装这个模块。

$ npm install --save-dev @babel/node
然后，执行babel-node就进入 REPL 环境。

$ npx babel-node
> (x => x * 2)(1)
2
babel-node命令可以直接运行 ES6 脚本。将上面的代码放入脚本文件es6.js，然后直接运行。

# es6.js 的代码
# console.log((x => x * 2)(1));
$ npx babel-node es6.js
2
@babel/register 模块
@babel/register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用 Babel 进行转码。

$ npm install --save-dev @babel/register
使用时，必须首先加载@babel/register。

// index.js
require('@babel/register');
require('./es6.js');
然后，就不需要手动对index.js转码了。

$ node index.js
2
需要注意的是，@babel/register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。

polyfill
Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如Iterator、Generator、Set、Map、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。

举例来说，ES6 在Array对象上新增了Array.from方法。Babel 就不会转码这个方法。如果想让这个方法运行，可以使用core-js和regenerator-runtime(后者提供generator函数的转码)，为当前环境提供一个垫片。

安装命令如下。

$ npm install --save-dev core-js regenerator-runtime
然后，在脚本头部，加入如下两行代码。

import 'core-js';
import 'regenerator-runtime/runtime';
// 或者
require('core-js');
require('regenerator-runtime/runtime);
Babel 默认不转码的 API 非常多，详细清单可以查看babel-plugin-transform-runtime模块的definitions.js文件。

浏览器环境
Babel 也可以用于浏览器环境，使用@babel/standalone模块提供的浏览器版本，将其插入网页。

<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
<script type="text/babel">
// Your ES6 code
</script>
注意，网页实时将 ES6 代码转为 ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本。

Babel 提供一个REPL 在线编译器，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。

polyfill
  Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如Iterator、Generator、Set、Map、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。

举例来说，ES6 在Array对象上新增了Array.from方法。Babel 就不会转码这个方法。如果想让这个方法运行，可以使用core-js和regenerator-runtime(后者提供generator函数的转码)，为当前环境提供一个垫片。

安装命令如下。

$ npm install --save-dev core-js regenerator-runtime
然后，在脚本头部，加入如下两行代码。

import 'core-js';
import 'regenerator-runtime/runtime';
// 或者
require('core-js');
require('regenerator-runtime/runtime);
Babel 默认不转码的 API 非常多，详细清单可以查看babel-plugin-transform-runtime模块的definitions.js文件。

关于继承 和原型链
  实例 -->原型(构造函数)---prototype--原型对象-->原型--原型对象
   实例  insrtanceof 原型
class 类
  1.创建一个类 就跟创建一个构造函数差不多   
    class Animal{
       constructor(arg1,arg2){
          this.name = arg1
        }
        function eat(){} //方法
        static function clip() //静态方法   实例无法访问  ，只能通过类访问 Animal.clip()
 2.类的继承
   class Dog extends Animal{
          constructor(){
          super();///继承的关键第二步
   }   
  组合式继承：
              function Animal(name='haha',age=18){
                this.name = name;
                this.age = age;
                console.log('我是构造函数');
            }
            function Dog(){
               Animal.call();
            }
            //组合式继承  构造函数会执行两次，
       Dog.prototype.eat= function(food='meat'){
                    console.log(`my food is ${food}`);
                };
        Dog.prototype = new Animal();
        let dog = new Dog(); //我是构造函数 我是构造函数
  寄生式继承：解决了组合式继承调用两次超类型构造函数的问题
  
        //寄生式继承  借助一个中间原型
        function Parent(name='kunnod'){
            this.name = name;
            this.colors = ['red','green','gray'];
            console.log('我是构造函数');
        }  
        Parent.prototype.getName =  function(){console.log(this.name)};
        function Child(name,age){
            Parent.call(this,name);
            this.age = age;
        }  
        function F(){};//中间原型
        F.prototype = Parent.prototype;
        Child.prototype = new F(); //借桥搭线
        let child = new Child('lisi',18); //我是构造函数

  
