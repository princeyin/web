1.1基线与字母x line-height的关系
  每个行框盒子都有一条基线，基线就在字母x的下边缘， 行距 = line-height - font-size  上行距 = 下行距(有些字体会往基线下沉一点，如果有小数点，上行距向下取整，下行距向上取整) 
  字母x的交叉点就是内联元素的中线
1.2单位ex  1ex = 1 font-size  
   图标居中对齐文字 ： 不管字体如何变化，图标都会居中对齐
   <span>关闭<i></i></span>
   i{
          display: inline-block;
          background:url('x.png') no-repeat center;
          background-size: cover;
          height:1ex;
          width:20px;
      }
1.3 单行文字居中： line-height:height  多行文字居中：将多行文字当成一个内联元素，设置这个元素的vertical-align : middle 
         #text{
           display: inline-block;
           line-height: 20px;
           width:140px;
           vertical-align: middle;
        }
1.4 line-height的几种单位
    line-height:1.5    当前元素的font-size * 1.5  就是行高 子元素会继承父元素的行高1.5 也就是子元素的line-height:1.5
    line-height:150%   当前元素的font-size * 1.5  就是行高 子元素会继承父元素的行高150%*父元素font-size 子元素的line-height:30px  而不是150%
    line-height:1.5em  当前元素的font-size * 1.5  就是行高 子元素会继承父元素的行高1.5em*父元素font-size 子元素的line-height:30px  而不是1.5em
1.5 line-height最大值特性     
    <div id="box">
         幽灵空白节点(相当于一个字符)<span id="shi">二月三月柳叶新</span> 
    </div>
    #box{ line-height:20px}  #shi{line-height:90px}    .box 高度 = 90px  着力点--span元素(line-height并不能改变元素的可视尺寸，但依然可以改变行框盒子的高度)
    #box{line-height:90px}   #shi{line-height:20px}    .box 高度 = 90px  着力点--幽灵空白节点
    纯内联元素(非空元素，一定要有文字的 inline-inline元素) 的盒子前面有一个幽灵空白节点
2.1vertical-align的4类属性值  只能作用于内联元素以及display:table-cell元素  浮动和绝对定位让元素块状化，vertical-align对他们都是无效的
  线类： baseline(默认)  top middle bottom
  文本类: text-top text-bottom
  上标下标类: sub  super
  数值、百分比类: 20px  2em  20%  可以为负值，往上偏移为正值  百分比的参照值是line-height
 2.2 现象1：容器高度比预期的高
      <div>
         <span>文字</span>
       </div>
       div: line-height:32px    span: font-size:24px    div高度 = 36px  这是因为span撑高了行框盒子 导致父元素高度增加，解决：要让幽灵空白节点的font-size一样大
     现象2：一个不设置高度的容器总比图片高一点  解决办法：1.图片块状化   2.消灭幽灵空白节点的行距--line-height:0  3.消灭幽灵空白节点 font-size:0  4.改变图片的对齐方式
 2.3 vertical-align:baseline  纯内联元素字母x的下边缘  替换元素 就是 元素的下边缘
      inline-block元素： 1. 里面没有内联元素或者overflow不是visible 该元素的基线就是其margin底边缘
                         2. 反之就是元素里面的最后一行内联元素的基线
3.1float的特性
    1 包裹性  2.块状化并格式化上下文 3 破坏文档流  4 没有任何margin合并  
3.2 行框盒子与浮动元素的不可重叠性：行框盒子如果和浮动元素的垂直高度有重叠，则行框盒子在正常定位状态下指挥跟随浮动元素，而不会发生重叠(可以把行框盒子当成一个内联元素)
3.3 元素浮动后 带来了两个影响， 1 父元素高度塌陷  2 行框盒子区域限制  
3.4 浮动元素的浮动参考并不是某个元素，而是其所在行的行框盒子
4.1 那什么时候会触发BFC呢？常见的情况如下：<html>根元素；float的值不为none；overflow的值为auto、scroll或hidden；display的值为table-cell、table-caption和inline-block中的任何一个；
    position的值不为relative和static。
 （1）借助overflow属性，如下：.lbf-content { overflow: hidden; }（2）融合display:table-cell和display:inline-block，如下：.lbf-content {    display: table-cell; width: 9999px; 
  这两种基于BFC的自适应方案均支持无限嵌套，因此，多栏自适应可以通过嵌套方式实现。这两种方案均有一点不足，前者如果子元素要定位到父元素的外面可能会被隐藏，后者无法直接让连续英文字符换行。
  所以，大家可以根据实际的项目场景选择合适的技术方案。
4.2 overflow
  则当子元素内容超出容器宽度高度限制的时候，剪裁的边界是border box的内边缘，而非padding box的内边缘，
  overflow-x/overflow-y支持的属性值和overflow属性一模一样。visible：默认值。hidden：剪裁。scroll：滚动条区域一直在。auto：不足以滚动时没有滚动条，可以滚动时滚动条出现。
  PC端，无论是什么浏览器，默认滚动条均来自<html>，而不是<body>标签。在PC端，对<html>标签设置overflow:hidden可以隐藏滚动条禁止滚动，但是在移动端基本上无效。
  在PC端，窗体滚动高度可以使用document.documentElement.scrollTop获取，但是在移动端，可能就要使用document.body.scrollTop获取。
  滚动条会占用容器的可用宽度或高度。
4.3 自定义滚动条
  ::-webkit-scrollbar {   /* 血槽宽度 */   width: 8px; height: 8px; } ::-webkit-scrollbar-thumb {   /* 拖动条 */   background-color: rgba(0,0,0,.3);   
  border-radius: 6px; } ::-webkit-scrollbar-track {   /* 背景槽 */   background-color: #ddd;   border-radius: 6px; }
4.4 单行文字溢出点点点效果。
  .ell {   text-overflow: ellipsis;   white-space: nowrap;   overflow: hidden; }
4.5 多行文字溢出点点点效果
  ell-rows-2 {    display: -webkit-box;    -webkit-box-orient: vertical;    -webkit-line-clamp: 2; }
4.6 overflow与描点
  我们的锚链就是一个很简单的#，则定位行为发生的时候，页面是定位到顶部的，所以我们一般实现返回顶部效果都是使用这样的HTML：<a href="#">返回顶部></a>
  <a href="javascript:">返回顶部</a>  
4.6 focus瞄点定位：类似于链接、按钮、输入框等可以被focus的元素在被focus时发生的页面重定位现象
    URL地址锚链定位是让元素定位在浏览器窗口的上边缘，focus瞄点定位是让元素在浏览器窗口范围内显示即可，不一定在上边
